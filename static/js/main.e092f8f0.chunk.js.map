{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardsArray","robots","map","user","i","key","SearchBox","text","searchChange","value","type","placeholder","onChange","e","target","Scroll","props","style","overflowY","border","height","children","App","useState","searchField","state","setState","useEffect","a","async","fetch","res","json","payload","prevState","getRobots","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACtB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrB,6BACI,4BAAKC,GACL,2BAAIC,MCOLI,EAZE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACUC,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,GAAIU,EAAKV,GAAIC,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAGnE,OACI,6BACKK,ICOEM,EAfG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAEvB,OACI,yBAAKZ,UAAU,OACX,2BACIa,MAAOF,EACPX,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAU,SAAAC,GAAC,OAAIL,EAAaK,EAAEC,OAAOL,YCDtCM,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCoCJC,EApCH,WAAO,IAAD,EACcC,mBAAS,CACjCtB,OAAQ,GACRuB,YAAa,KAHH,mBACNC,EADM,KACCC,EADD,KAYdC,qBAAU,YANQ,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACIE,MAAM,+CADV,cACRC,EADQ,kBAAAH,EAAA,MAEQG,EAAIC,QAFZ,OAERC,EAFQ,OAGdP,GAAS,SAAAQ,GAAS,sBAAUA,EAAV,CAAqBjC,OAAQgC,OAHjC,qCAOdE,KACD,IAEH,IAOMC,EAAiBX,EAAMxB,OAAOoC,QAAO,SAAAC,GAAK,OAAIA,EAAM5C,KAAK6C,cAAcC,SAASf,EAAMD,YAAYe,kBAExG,OACI,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAZE,SAAAD,GACjBmB,GAAS,SAAAQ,GAAS,sBACXA,EADW,CAEdV,YAAajB,UAUb,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUN,OAAQmC,O,YCvBdK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e092f8f0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({ id, name, email }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardsArray = robots.map((user, i) => {\r\n        return <Card key={i} id={user.id} name={user.name} email={user.email} />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({ text, searchChange }) => {\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                value={text}\r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={e => searchChange(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '700px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll\r\n","import React, { useState, useEffect } from 'react'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\n\r\nconst App = () => {\r\n    const [ state, setState ] = useState({\r\n        robots: [],\r\n        searchField: ''\r\n    })\r\n\r\n    const getRobots = async () => {\r\n        const res = await fetch('https://jsonplaceholder.typicode.com/users')\r\n        const payload = await res.json()\r\n        setState(prevState => ({ ...prevState, robots: payload }) )\r\n    }\r\n\r\n    useEffect(() => {\r\n        getRobots()\r\n    }, [])\r\n\r\n    const searchChange = text => {\r\n        setState(prevState => ({\r\n            ...prevState,\r\n            searchField: text\r\n        }))\r\n    }\r\n\r\n    const filteredRobots = state.robots.filter(robot => robot.name.toLowerCase().includes(state.searchField.toLowerCase()))\r\n\r\n    return (\r\n        <div className='tc'>\r\n            <h1 className=\"f2\">RoboFriends</h1>\r\n            <SearchBox searchChange={searchChange} />\r\n            <Scroll>\r\n                <CardList robots={filteredRobots} />\r\n            </Scroll>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App'\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}